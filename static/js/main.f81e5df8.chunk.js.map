{"version":3,"sources":["app_component/weather.component.jsx","app_component/form.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["minmaxTemp","min","max","className","Weather","props","city","weathericon","temp_celsius","temp_min","temp_max","description","Form","error","role","onSubmit","loadweather","type","name","autoComplete","placeholder","App","getWeather","e","a","preventDefault","target","elements","value","country","fetch","api_call","json","response","console","log","setState","sys","celsius","calCelsius","main","temp","weather","get_Weathericon","id","state","undefined","icon","celsiud","Thunderstorm","Drizzle","Rain","Snow","Atmosphere","Clear","Clouds","Math","floor","icons","rangeid","this","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f81e5df8.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Weather=(props)=>{\r\n    return(\r\n        <div className=\"container\">\r\n            <div className=\"cards pt-4\">\r\n                <h1>\r\n                    {props.city}\r\n                </h1>\r\n                <h5 className=\"py-4\">\r\n                    <i className={`wi ${props.weathericon}  display-1`}></i>\r\n                </h5>\r\n                {props.temp_celsius ?(<h1 className=\"py-2\">{props.temp_celsius}&deg;</h1>\r\n                ):null}\r\n                \r\n\r\n                {/** show max and min temp**/}\r\n                {minmaxTemp(props.temp_min,props.temp_max)}\r\n\r\n                <h4 className=\"py-3\">{props.description}</h4>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction minmaxTemp(min,max){\r\n    if(min&&max){\r\n        return(\r\n            <h3>\r\n            <span className=\"px-4\">{min}&deg;</span>\r\n            <span className=\"px-4\">{max}&deg;</span>\r\n        </h3>\r\n        )\r\n    }\r\n    \r\n}\r\nexport default Weather;","import React from 'react';\r\nimport \"./form.style.css\";\r\n\r\nconst Form=props=>{\r\n    return(\r\n        <div className=\"container\">\r\n            <div>\r\n                {props.error ? error():null}\r\n            </div>\r\n\r\n         <form onSubmit={props.loadweather}>\r\n            <div className=\"row\">\r\n                <div className=\"col-md-3 offset-md-2\">\r\n                    <input\r\n                       type=\"text\"\r\n                       className=\"form-control\"\r\n                       name=\"city\"\r\n                       autoComplete=\"off\"\r\n                       placeholder=\"city\"\r\n                    />\r\n                </div>\r\n\r\n                <div className=\"col-md-3\">\r\n                     <input\r\n                     type=\"text\"\r\n                     className=\"form-control\"\r\n                     name=\"country\"\r\n                     autoComplete=\"off\"\r\n                     placeholder=\"country\"\r\n                     />\r\n                </div>\r\n\r\n                <div className=\"col-md-3 mt-md-0 text-md-left\">\r\n                    <button className=\"btn btn-warning\">Get weather</button>\r\n                </div>\r\n            </div>\r\n         </form>\r\n        </div>\r\n    )\r\n};\r\n\r\nfunction error(){\r\n    return(\r\n        <div className=\"alert alert-danger mx-5\" role=\"alert\">\r\n            please Enter city and country\r\n        </div>\r\n    )\r\n}\r\nexport default Form;","import React from 'react'\nimport './App.css';\n\nimport \"weather-icons/css/weather-icons.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport Weather from './app_component/weather.component';\nimport Form from './app_component/form.component';\n\n//api call api.openweathermap.org/data/2.5/weather?q=London,uk&appid={API key}\nconst API_Key=\"e5b5db7a2ef058017216d8fc8fd64a77\";\n\nclass App extends React.Component{\n  constructor(){\n    super();\n    this.state={\n      city:undefined,\n      country:undefined,\n      icon:undefined,\n      main:undefined,\n      celsiud:undefined,\n      temp_max:undefined,\n      temp_min:undefined,\n      description:\"\",\n      error:false\n    };\n    \n\n    this.weathericon={\n      Thunderstorm:\"wi-thunderstorm\",\n      Drizzle:\"wi-sleet\",\n      Rain:\"wi-storm-showers\",\n      Snow:\"wi-snow\",\n      Atmosphere:\"wi-fog\",\n      Clear:\"wi-day-sunny\",\n      Clouds:\"wi-day-fog\"\n    }\n  }\n\n  calCelsius(temp){\n    let cell=Math.floor(temp-273.15);\n    return cell;\n\n  }\n\n  get_Weathericon(icons,rangeid){\n    switch(true){\n           case rangeid >=200 && rangeid <=232:\n           this.setState({icon:this.weathericon.Thunderstorm});\n        break;\n           case rangeid >=300 && rangeid <=321:\n           this.setState({icon:this.weathericon.Drizzle});\n        break;\n            case rangeid >=500 && rangeid <=531:\n            this.setState({icon:this.weathericon.Rain}); \n        break;\n            case rangeid >=600 && rangeid <=622:\n            this.setState({icon:this.weathericon.Snow});\n        break;\n            case rangeid >=701 && rangeid <=781:\n            this.setState({icon:this.weathericon.Atmosphere});  \n        break;\n            case rangeid ===800 :\n            this.setState({icon:this.weathericon.Clear});      \n        break;\n            case rangeid >=801 && rangeid <=804:\n            this.setState({icon:this.weathericon.Clouds});\n        break;\n        default:\n        \n          this.setState({icon:this.weathericon.Thunderstorm})  \n\n    }\n  }\n\n  getWeather=async(e)=>{\n    \n    e.preventDefault();\n\n    const city=e.target.elements.city.value;\n    const country=e.target.elements.city.value;\n\n    if(city&&country){\n      const api_call=await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${API_Key}`);\n    \n    const response=await api_call.json();\n\n    console.log(response);\n\n    this.setState({\n      city:`${response.name},${response.sys.country}`,\n      celsius:this.calCelsius(response.main.temp),\n      temp_max:this.calCelsius(response.main.temp_max),\n      temp_min:this.calCelsius(response.main.temp_min),\n      description:response.weather[0].description,\n      })\n      this.get_Weathericon(this.weathericon,response.weather[0].id)\n    }else{\n      this.setState({error:true});\n    }\n  };\n\n  render(){\n    return(\n      <div className=\"App\">\n        <Form loadweather={this.getWeather} error={this.state.error}/>\n        <Weather \n        city={this.state.city} \n        country={this.state.country} \n        temp_celsius={this.state.celsius}\n        temp_max={this.state.temp_max}\n        temp_min={this.state.temp_min}\n        description={this.state.description}\n        weathericon={this.state.icon}\n        />\n      </div>\n    );\n  }\n}\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}